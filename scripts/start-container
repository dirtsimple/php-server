#!/bin/bash -e

main() {
    install-extras
    setup-environment-vars
    setup-users
    generate-system-configuration

    if ! checkout-exists; then
        perform-git-checkout
    fi

    apply-nginx-permissions
    generate-user-configuration

    if composer.lock-exists && ! isTrue "${SKIP_COMPOSER-$NO_COMPOSER_INSTALL}"; then
        run-composer-install
    fi

    run-user-scripts
    exec-supervisord
}

checkout-exists()      { [ -d "$CODE_BASE/.git" ]; }
composer.lock-exists() { [ -f "$CODE_BASE/composer.lock" ]; }
# shellcheck disable=SC2086
glob-list()            ( shopt -s nullglob; echo $1; )

setup-environment-vars() {
    # Set up CODE_BASE, PUBLIC_DIR, and WEBROOT
    CODE_BASE=${CODE_BASE:-/var/www/html}
    [[ -d "$CODE_BASE" ]] || mkdir -p "$CODE_BASE"
    export CODE_BASE="$(realpath $CODE_BASE)"   # must exist!
    [[ -z "$COMPOSER_CONFIG_JSON" ]] || { echo "$COMPOSER_CONFIG_JSON" >"$COMPOSER_HOME/config.json"; }
    cd "$CODE_BASE"
    [[ $PUBLIC_DIR ]] && mkdir -p "$PUBLIC_DIR"
    export PUBLIC_DIR="$(realpath ${PUBLIC_DIR-.})" # must exist!
    export WEBROOT="${WEBROOT-${PUBLIC_DIR}}"
    export XDEBUG_EXT="$(find /usr/local/lib/php/extensions/ -name xdebug.so)"
}

generate-system-configuration() {
    expand-templates /tpl /
    # Git config
    [[ -z "$GIT_NAME" ]]  || git config --system user.name  "$GIT_NAME";
    [[ -z "$GIT_EMAIL" ]] || git config --system user.email "$GIT_EMAIL";
    git config --system push.default simple
}

ensure-dir() {
    [[ -d "$1" ]] || mkdir -p "$1"
}

expand-template() {
    # Expand precisely one template file to a target filename
    reject-nginx-writable "$1"
    ensure-dir "$(dirname "$2")"
    dockerize -template "$1:$2"
}

reject-nginx-writable() {
    dv=($(stat -Lc "%U %G %A" "$1")) && [[
		"${dv[0]}" == "nginx" || "${dv[2]:8:1}" == "w" ||
		( "${dv[2]:5:1}" == "w" && " ${NGINX_GROUPS[*]} " = *" ${dv[1]} "* )
	]] && echo >&2 "${2-Template} file $1 must not be writable by nginx" && exit 1
    true
}

expand-templates() {
    # Setup configuration files based on environment
    local src="$1" dst="${2-/}"
    cd "$CODE_BASE"     # process everything relative to CODE_BASE
    if [[ -d "$src" ]]; then
        # Source directory exists: expand subtree under destination dir
        ensure-dir "$dst"
        src="$(realpath "$src")" dst="$(realpath "$dst")"
        for f in $(find "$src" -type f); do
            expand-template "$f" "${dst%/}${f#$src}"
        done
    fi
}

setup-users() {
    ensure-user nginx "${PUID-}" "${PGID-}"
    ensure-user developer "${DEVELOPER_UID-}" "${DEVELOPER_GID-}"
    NGINX_GROUPS=($(groups nginx))
    addgroup developer nginx
    chown -Rf developer:developer "$COMPOSER_HOME" ~developer
}

grant() {
    for f in $4; do
        ch$1 -Rf $2 "$f" && chmod -Rf $3 $f
    done
}

apply-nginx-permissions() (
    shopt -s globstar
    grant grp nginx g+r "/var/tmp/nginx ${NGINX_READABLE-.}"
    grant grp nginx g+w "/var/tmp/nginx $NGINX_WRITABLE"
    grant own nginx o+w "/var/tmp/nginx $NGINX_OWNED"

    grant own developer go-w   "$NGINX_NO_WRITE"
    grant own developer go-rwx "$NGINX_NO_RWX"
)

run-composer-install() {
    # Try auto install for composer
    as-developer composer install --working-dir="$CODE_BASE" $COMPOSER_OPTIONS
}

run-user-scripts() {
    if isTrue "$RUN_SCRIPTS"; then
        RUN_SCRIPTS="$CODE_BASE/scripts/*";
    fi
    # run scripts in list-grouped, glob-sorted  order
    for i in $(glob-list "$RUN_SCRIPTS"); do
        reject-nginx-writable "$i"
        [[ -x "$i" ]] || { chmod ug+x "$i" && sync; } || return
        "$i"
    done
}

perform-git-checkout() {
    # Pull down code from git for our site!
    [[ ${GIT_REPO-} ]] || return 0

	# Remove the test index file if you are pulling in a git repo
	if ! isTrue "${REMOVE_FILES-true}"; then
		echo "skipping removal of files"
	else
		rm -Rf "$CODE_BASE"/*
	fi

	set -- git clone  # build command
	[[ ! "$GIT_BRANCH" ]] || set -- "$@" -b "$GIT_BRANCH"

	if [[ ! "${GIT_USERNAME-}${GIT_PERSONAL_TOKEN-}" ]] || isTrue "${GIT_USE_SSH-}"; then
		set -- "$@" "${GIT_REPO}"
	else
		set -- "$@" "https://${GIT_USERNAME}:${GIT_PERSONAL_TOKEN}@${GIT_REPO}"
	fi
	chown -R developer:developer "$CODE_BASE"
	as-developer "$@" "$CODE_BASE"
	if [[ "$GIT_TAG$GIT_COMMIT" ]]; then
		as-developer git -C "$CODE_BASE" checkout "${GIT_TAG-$GIT_COMMIT}"
	fi
}

generate-user-configuration() {
    # Enable custom nginx config files if they exist
    set -- "$CODE_BASE/conf/nginx/nginx";
    [[ ! -f $1.conf ]] || cp $1.conf /etc/nginx/nginx.conf;
    for tag in "" "-ssl"; do
        [[ ! -f $1-site$tag.conf ]] || cp $1-site$tag.conf  /etc/nginx/sites-available/default$tag.conf
    done
    # Install env-templated files if they exist - paths are relative to $CODE_BASE
    for tpl in ${DOCKERIZE_TEMPLATES}; do
        # deliberately leaving off quotes here to split on `:`
        expand-templates ${tpl/:/ }
    done
    [[ -z "$GLOBAL_REQUIRE" ]] || as-developer composer-global $GLOBAL_REQUIRE
}

exec-supervisord() {
    # don't start if modd config is webserver-writable
    [[ ! $MODD_CONF ]] || (
        cd "${MODD_DIR-$CODE_BASE}"
        reject-nginx-writable "$MODD_CONF" "modd config"
    ) || exit $?

    # don't start if webhook config is webserver-writable
    [[ ! $WEBHOOK_CONF ]] || (
        cd "${WEBHOOK_DIR-$CODE_BASE}"
        reject-nginx-writable "$WEBHOOK_CONF" "webhook config"
    ) || exit $?

    # Start supervisord and services
    exec /usr/bin/supervisord -n -c /etc/supervisord.conf
}

# for consistency, exactly match how dockerize's isTrue function works
isTrue() {
	case $1 in true|TRUE|True|T|t|1) return  ;;  # these strings are true
	esac
	false # all others are false
}

if [[ $0 == "$BASH_SOURCE" ]]; then
	main
fi

